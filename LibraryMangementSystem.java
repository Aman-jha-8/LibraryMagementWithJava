import java.util.*;class LibraryManagementSystem {    private Map<Integer, Student> studentsMap;    private Map<Integer, Book> booksMap;    public LibraryManagementSystem() {        studentsMap = new HashMap<>();        booksMap = new HashMap<>();    }    public void addStudent(Student student) {        studentsMap.put(student.getStudentId(), student);    }    public Student getStudent(int studentId) {        return studentsMap.get(studentId);    }    public void addBook(Book book) {        booksMap.put(book.getBookId(), book);    }    public Book getBook(int bookId) {        return booksMap.get(bookId);    }    public void borrowBook(int studentId, int bookId) {        Student student = studentsMap.get(studentId);        Book book = booksMap.get(bookId);        if (student == null || book == null) {            System.out.println("Student or book not found.");            return;        }        if (!book.isAvailable()) {            System.out.println("The book is not available for borrowing.");            return;        }        student.addBorrowedBook(book);        book.setAvailable(false);        System.out.println("Book '" + book.getTitle() + "' borrowed by " + student.getName());    }    public void returnBook(int studentId, int bookId) {        Student student = studentsMap.get(studentId);        Book book = booksMap.get(bookId);        if (student == null || book == null) {            System.out.println("Student or book not found.");            return;        }        if (!student.getBorrowedBooks().contains(book)) {            System.out.println("This book is not borrowed by the student.");            return;        }        student.removeBorrowedBook(book);        book.setAvailable(true);        System.out.println("Book '" + book.getTitle() + "' returned by " + student.getName());    }    public Student getStudentWithMostBooks() {        Student mostBooksStudent = null;        int maxBorrowedBooks = 0;        for (Student student : studentsMap.values()) {            int borrowedBooksCount = student.getBorrowedBooks().size();            if (borrowedBooksCount > maxBorrowedBooks) {                maxBorrowedBooks = borrowedBooksCount;                mostBooksStudent = student;            }        }        return mostBooksStudent;    }    public Book getMostBorrowedBook() {        Book mostBorrowedBook = null;        int maxBorrowedCount = 0;        for (Book book : booksMap.values()) {            int borrowedCount = 0;            for (Student student : studentsMap.values()) {                if (student.getBorrowedBooks().contains(book)) {                    borrowedCount++;                }            }            if (borrowedCount > maxBorrowedCount) {                maxBorrowedCount = borrowedCount;                mostBorrowedBook = book;            }        }        return mostBorrowedBook;    }    public static void main(String[] args) {        LibraryManagementSystem library = new LibraryManagementSystem();        Scanner scanner = new Scanner(System.in);        while (true) {            System.out.println("\nChoose an option:");            System.out.println("1. Add student");            System.out.println("2. Add book");            System.out.println("3. Borrow a book");            System.out.println("4. Return a book");            System.out.println("5. Show student who borrowed most books");            System.out.println("6. Show book most borrowed by students");            System.out.println("7. Exit");            int choice = scanner.nextInt();            if (choice == 1) {                System.out.print("Enter student ID: ");                int studentId = scanner.nextInt();                System.out.print("Enter student name: ");                scanner.nextLine(); // Consume the newline character left by nextInt()                String studentName = scanner.nextLine();                Student student = new Student(studentId, studentName);                library.addStudent(student);                System.out.println("Student added successfully.");            } else if (choice == 2) {                System.out.print("Enter book ID: ");                int bookId = scanner.nextInt();                System.out.print("Enter book title: ");                scanner.nextLine(); // Consume the newline character left by nextInt()                String bookTitle = scanner.nextLine();                System.out.print("Enter book author: ");                String bookAuthor = scanner.nextLine();                Book book = new Book(bookId, bookTitle, bookAuthor);                library.addBook(book);                System.out.println("Book added successfully.");            } else if (choice == 3) {                System.out.print("Enter student ID: ");                int studentId = scanner.nextInt();                System.out.print("Enter book ID: ");                int bookId = scanner.nextInt();                library.borrowBook(studentId, bookId);            } else if (choice == 4) {                System.out.print("Enter student ID: ");                int studentId = scanner.nextInt();                System.out.print("Enter book ID: ");                int bookId = scanner.nextInt();                library.returnBook(studentId, bookId);            } else if (choice == 5) {                Student mostBooksStudent = library.getStudentWithMostBooks();                if (mostBooksStudent != null) {                    System.out.println("Student with most books: " + mostBooksStudent.getName());                } else {                    System.out.println("No students found.");                }            } else if (choice == 6) {                Book mostBorrowedBook = library.getMostBorrowedBook();                if (mostBorrowedBook != null) {                    System.out.println("Book most borrowed by students: " + mostBorrowedBook.getTitle());                } else {                    System.out.println("No books found.");                }            } else if (choice == 7) {                break;            } else {                System.out.println("Invalid option. Please try again.");            }        }    }}